(* ppc/keiko.ml *)

open Print

(* |symbol| -- global symbols *)
type symbol = string

type codelab = int

let nolab = -1

(* |lab| -- last used code label *)
let lab = ref 0

(* |label| -- allocate a code label *)
let label () = incr lab; !lab

(* |fLab| -- format a code label for printf *)
let fLab n = fMeta "$" [fNum n]

let nosym = "*nosym*"

let gensym () = sprintf "g$" [fLab (label ())]

(* |op| -- type of picoPascal operators *)
type op = Plus | Minus | Times | Div | Mod | Eq 
  | Uminus | Lt | Gt | Leq | Geq | Neq | And | Or | Not | PlusA | Lsl

(* |inst| -- type of intermediate instructions *)
type inst =
    CONST of int 		(* Constant (value) *)
  | GLOBAL of symbol * int	(* Constant (symbol, offset) *)
  | LOCAL of int		(* Local address (offset) *)
  | LOAD of int			(* Load (size) *)
  | STORE of int		(* Store (size) *)
  | FIXCOPY 			(* Copy multiple values (size) *)
  | CALL of int * int 		(* Call procedure (nparams, rsize) *)
  | RESULT of int		(* Procedure result (rsize) *)
  | MONOP of op			(* Perform unary operation (op) *)
  | BINOP of op			(* Perform binary operation (op) *)
  | BOUND of int	  	(* Array bound check (line) *)
  | NCHECK of int		(* Null pointer check (line) *)
  | LABEL of codelab		(* Set code label *)
  | JUMP of codelab		(* Unconditional branch (dest) *)
  | JUMPC of op * codelab	(* Conditional branch (cond, dest) *)
  | JUMPB of bool * codelab	(* Branch on boolean (val, dest) *)

  (* Extra instructions *)
  | LINE of int			(* Line number *)
  | NOP
  | SEQ
  | AFTER			(* Expression with side effect *)
  | TEMP of int			(* Temporary *)

let op_name =
  function
      Plus -> "PLUS" | Minus -> "MINUS" | Times -> "TIMES"
    | Div -> "DIV" | Mod -> "MOD" | Eq -> "EQ"
    | Uminus -> "UMINUS" | Lt -> "LT" | Gt -> "GT" 
    | Leq -> "LEQ" | Geq -> "GEQ" | Neq -> "NEQ" 
    | And -> "AND" | Or -> "OR" | Not -> "NOT"
    | PlusA -> "PLUSA" | Lsl -> "LSL"

let fOp w = fStr (op_name w)

let fType =
  function 1 -> fStr "C" | 4 -> fStr "W" | s -> fMeta "*$*" [fNum s]

let fType1 =
  function 0 -> fStr "" | 1 -> fStr "W" | s -> fMeta "*$*" [fNum s]

let fInst =
  function
      CONST x ->	fMeta "CONST $" [fNum x]
    | GLOBAL (a, n) -> 	if n = 0 then fMeta "GLOBAL $" [fStr a]
			else fMeta "GLOBAL $+$" [fStr a; fNum n]
    | LOCAL n ->	fMeta "LOCAL $" [fNum n]
    | LOAD s -> 	fMeta "LOAD$" [fType s]
    | STORE s ->     	fMeta "STORE$" [fType s]
    | FIXCOPY ->	fStr "FIXCOPY"
    | CALL (n, s) ->	fMeta "CALL$ $" [fType1 s; fNum n]
    | RESULT s ->	fMeta "RESULT$" [fType1 s]
    | MONOP w ->  	fMeta "$" [fStr (op_name w)]
    | BINOP w ->  	fMeta "$" [fStr (op_name w)]
    | BOUND n ->	fMeta "BOUND $" [fNum n]
    | NCHECK n ->	fMeta "NCHECK $" [fNum n]
    | LABEL l ->	fMeta "LABEL $" [fLab l]
    | JUMP l ->		fMeta "JUMP $" [fLab l]
    | JUMPC (w, l) ->   fMeta "J$ $" [fStr (op_name w); fLab l]
    | JUMPB (b, l) ->	fMeta "$ $" 
    			  [fStr (if b then "JUMPT" else "JUMPF"); fLab l]
    | LINE n ->		fMeta "LINE $" [fNum n]
    | NOP ->		fStr "NOP"
    | SEQ ->		fStr "SEQ"
    | AFTER ->		fStr "AFTER"
    | TEMP n ->		fMeta "TEMP $" [fNum n]

let put =
  function
      LINE n ->
	printf "! $\n" [fStr (Source.get_line n)]
    | x ->
	printf "$\n" [fInst x]


let int_of_bool b = if b then 1 else 0

(* |do_monop| -- evaluate unary operators *)
let do_monop w x =
  match w with
      Uminus -> - x
    | Not -> if x <> 0 then 0 else 1
    | _ -> failwith "do_monop"

(* |do_binop| -- evaluate binary operators *)
let do_binop w x y =
  match w with
      Plus -> x + y
    | Minus -> x - y
    | Times -> x * y
    | Div -> x / y
    | Mod -> x mod y
    | Eq -> int_of_bool (x = y)
    | Lt -> int_of_bool (x < y)
    | Gt -> int_of_bool (x > y)
    | Leq -> int_of_bool (x <= y)
    | Geq -> int_of_bool (x >= y)
    | Neq -> int_of_bool (x <> y)
    | And -> if x <> 0 then y else 0
    | Or -> if x <> 0 then 1 else y
    | PlusA -> x + y
    | _ -> failwith "do_binop"

(* |negate| -- negation of a comparison *)
let negate = 
  function Eq -> Neq | Neq -> Eq | Lt  -> Geq
    | Leq -> Gt | Gt  -> Leq | Geq -> Lt
    | _ -> failwith "negate"


(* Operator trees *)

type optree = Node of inst * optree list

let line_start =
  function
      [] -> true
    | <LINE n> :: us -> true
    | _ -> false

let rec canon_app t us =
  match t with
      <SEQ, @ts> -> List.fold_right canon_app ts us
    | <NOP> -> us
    | <LINE n> ->
	if n = 0 || line_start us then us else <LINE n> :: us
    | _ -> effects t (result t :: us)

and effects t us =
  match t with
      <AFTER, t1, t2> -> canon_app t1 (effects t2 us)
    | <w, @ts> -> List.fold_right effects ts us

and result =
  function
      <AFTER, t1, t2> -> result t2
    | <w, @ts> -> <w, @(List.map result ts)>

let canon t = canon_app t []

open Format

let rec grind (Node (x, ts)) =
  open_hvbox 2; print_char '<'; 
  print_string (Print.sprintf "$" [fInst x]);
  List.iter (fun u -> print_char ','; print_space (); grind u) ts;
  print_char '>'; close_box ()

let print_optree t =
  set_formatter_out_channel stdout;
  grind t;
  print_newline ()
