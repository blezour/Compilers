(* ppc2/share.mlp *)

open Print
open Keiko
open Mach

(* |dagnode| -- node in DAG representation of an expression *)
type dagnode =
  { g_serial: int;			(* Serial number *)
    g_op: inst;				(* Operator *)
    g_rands: dagnode list;		(* Operands *)
    mutable g_refct: int;		(* Reference count *)
    mutable g_temp: int }		(* Temp, or -1 if none *)

(* |serial| -- fetch serial number of a node *)
let serial g = g.g_serial

(* |node_table| -- hash table for value numbering *)
let node_table = Hashtbl.create 129

(* |node_count| -- counter for numbering nodes *)
let node_count = ref 0

(* |newnode| -- create a new node *)
let newnode op rands = 
  incr node_count;
  List.iter (function g -> g.g_refct <- g.g_refct+1) rands;
  { g_serial = !node_count; g_op = op; g_rands = rands; 
    g_refct = 0; g_temp = -1 }

(* |node| -- create a new node or share an existing one *)
let node op rands =
  let key = (op, List.map serial rands) in
  try Hashtbl.find node_table key with 
    Not_found -> 
      let n = newnode op rands in
      Hashtbl.add node_table key n; 
      n

(* |reset| -- clear the value numbering table *)
let reset () = 
  Hashtbl.clear node_table

(* |alias| -- test if address g1 could be an alias for g2 *)
let alias g1 g2 =
  let simple =
    function LOCAL _ | GLOBAL _ | TEMP _  -> true; | _ -> false in
  if simple g1.g_op && simple g2.g_op then g1.g_op = g2.g_op else true

(* |memory| -- test if g is a memory address *)
let memory g =
  match g.g_op with TEMP _ -> false | _ -> true

(* |kill| -- remove nodes that satisfy a test *)
let kill p = 
  let f (op, rands) g =
    match g.g_op with
	LOAD _ -> 
	  if p (List.hd g.g_rands) then 
	    (* Pray that deleting items during an |iter| works properly *)
	    Hashtbl.remove node_table (op, rands)
      | _ -> () in
  Hashtbl.iter f node_table

(* |make_dag| -- convert an expression into a DAG *)
let rec make_dag t =
  match t with
      <STORE s, t1, t2> -> 
	let g1 = make_dag t1 in
	let g2 = make_dag t2 in
	kill (alias g2); 
	node (STORE s) [g1; g2; node (LOAD s) [g2]]
    | <LABEL lab> -> 
	reset (); node (LABEL lab) []
    | <CALL (n, r), @ts> -> 
	let gs = List.map make_dag ts in
	kill memory;
	newnode (CALL (n, r)) gs
    | <w, @ts> ->
	node w (List.map make_dag ts)

(* |dagify| -- convert a forest into a list of DAG roots *)
let dagify ts = 
  reset (); List.map make_dag ts

let is_regvar g =
  match g.g_op with TEMP _ -> true | _ -> false

let word_size = int_rep.r_size

(* |visit| -- convert dag to tree, sharing the root if worthwhile *)
let rec visit root g =
  match (g.g_op, g.g_rands) with
      ((TEMP _ | LOCAL _ | CONST _ | GLOBAL (_, _)), []) -> 
	build g
    | (LOAD s, [g1]) ->
	if g.g_refct = 1 || is_regvar g1 then build g else share g
    | (CALL (_, _), _) ->
	if root then build g else share g
    | (_, _) ->
	if root || g.g_refct = 1 then build g else share g

(* |build| -- convert dag to tree with no sharing at the root *)
and build g =
  match (g.g_op, g.g_rands) with
      (CALL (n, r), p::args) ->
	(* Don't share constant proc addresses *)
	let p' = 
	  match p.g_op with GLOBAL _ -> build p | _ -> visit false p in
	<CALL (n, r), @(p' :: List.map (visit false) args)>
    | (STORE s, [g1; g2; g3]) ->
	g2.g_refct <- g2.g_refct-1;	(* Ignore artificial ref from g3 *)
	let g1' = if g3.g_refct = 1 || is_regvar g2 then visit false g1
	  else share g1 in
	g3.g_temp <- g1.g_temp;
	<STORE s, g1', visit false g2>
    | (_, _) -> 
	<g.g_op, @(List.map (visit false) g.g_rands)>

(* |share| -- convert dag to tree, sharing the root *)
and share g =
  if g.g_temp >= 0 then begin
    Regs.inc_temp g.g_temp;
    <LOAD word_size, <TEMP g.g_temp>>
  end else begin
    let d' = build g in
    let n = Regs.new_temp 2 in 
    g.g_temp <- n;
    <AFTER, <STORE word_size, d', <TEMP n>>, <LOAD word_size, <TEMP n>>>
  end

let undagify gs = List.map (visit true) gs

let traverse ts = 
  let gs = dagify ts in
  let ts' = undagify gs in
  canon <SEQ, @ts'>
