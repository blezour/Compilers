(* ppc/kgen.ml *)

open Dict
open Tree
open Mach
open Keiko
open Lexer
open Print

let boundchk = ref false
let optlevel = ref 0
let debug = ref 0
  
(* |level| -- nesting level of current procedure *)
let level = ref 0

(* |retlab| -- label to return from current procedure *)
let retlab = ref nolab

(* |size_of| -- calculate size of type *)
let size_of t = t.t_rep.r_size

(* |count_of| -- calculate number of stack slots for type *)
let count_of t = if t.t_rep.r_size = 0 then 0 else 1

(* |is_const| -- test if expression is a constant *)
let is_const e = (e.e_value <> None)

(* |get_value| -- get constant value or fail *)
let get_value e =
  match e.e_value with
      Some v -> v
    | None -> failwith "get_value"

(* |arg_size| -- compute size of argument *)
let arg_size f =
  match f.d_kind with PParamDef -> 2 | _ -> 1

(* |line_number| -- compute line number of variable for bound check *)
let rec line_number v =
  match v.e_guts with
      Variable x -> x.x_line
    | Sub (a, i) -> line_number a
    | Select (r, x) -> x.x_line
    | Deref p -> line_number p
    | _ -> failwith "line_number"

(* |addr_size| -- size of address *)
let addr_size = addr_rep.r_size

(* |schain| -- code to follow N links of static chain *)
let schain n =
  if n = 0 then
    <LOCAL 0>
  else
    let rec chain k =
      if k = 1 then
	<LOAD addr_size, <LOCAL stat_link>>
      else
	<LOAD addr_size, <BINOP PlusA, chain (k-1), <CONST stat_link>>> in
    chain n

(* |address| -- code to push address of an object *)
let address d =
  match d.d_addr with
      Global g -> 
	<GLOBAL (g, 0)>
    | Local off -> 
	if d.d_level = !level then 
	  <LOCAL off>
	else begin
	  <BINOP PlusA, schain (!level - d.d_level), <CONST off>>
	end
    | Nowhere -> 
	failwith (sprintf "address $" [fId d.d_tag])

(* |gen_closure| -- two trees for a (code, envt) pair *)
let gen_closure d =
  match d.d_kind with
      ProcDef ->
	[address d;
	  if d.d_level = 0 then <CONST 0> else schain (!level - d.d_level)]
    | PParamDef ->
	[<LOAD addr_size, address d>;
	  <LOAD addr_size, <BINOP PlusA, address d, <CONST addr_size>>>]
    | _ -> failwith "missing closure"

(* |libcall| -- code for library call *)
let libcall lab n args rtype =
  <CALL (n, count_of rtype), @(<GLOBAL (lab, 0)> :: args)>

(* |gen_addr| -- code for the address of a variable *)
let rec gen_addr v = 
  match v.e_guts with
      Variable x ->
	let d = x.x_def in
	begin
	  match d.d_kind with
	      VarDef ->
		address d
	    | VParamDef ->
		<LOAD addr_size, address d>
	    | CParamDef ->
		if scalar d.d_type || is_pointer d.d_type then 
		  address d
		else
		  <LOAD addr_size, address d>
	    | StringDef ->
		address d
	    | _ -> 
		failwith "load_addr"
	end
    | Sub (a, i) ->
	let bound_check t =
	  if !boundchk then 
 	    <BOUND (line_number a), t, <CONST (bound a.e_type)>>
	  else
	    t in
	<BINOP PlusA, 
  	  gen_addr a,
	  <BINOP Times,
	    bound_check (gen_expr i),
	    <CONST (size_of v.e_type)>>>
    | Select (r, x) ->
	<BINOP PlusA,
	  gen_addr r,
	  <CONST (offset_of x.x_def)>>
    | Deref p ->
	let null_check t =
	  if !boundchk then
	    <NCHECK (line_number p), t>
	  else
	    t in
	null_check (gen_expr p)
    | String (lab, n) ->
	<GLOBAL (lab, 0)>
    | _ -> failwith "gen_addr"

(* |gen_expr| -- tree for the value of an expression *)
and gen_expr e =
  match e.e_value with
      Some v -> 
	<CONST v>
    | None -> 
	begin
	  match e.e_guts with
	      Variable _ | Sub _ | Select _ | Deref _ ->
		<LOAD (size_of e.e_type), gen_addr e>
	    | Monop (w, e1) ->
		<MONOP w, gen_expr e1>
	    | Binop (Div, e1, e2) ->
		libcall "_int_div" 2 [gen_expr e1; gen_expr e2] integer
	    | Binop (Mod, e1, e2) ->
		libcall "_int_mod" 2 [gen_expr e1; gen_expr e2] integer
	    | Binop (w, e1, e2) ->
		<BINOP w, gen_expr e1, gen_expr e2>
	    | FuncCall (p, args) -> 
		gen_call p args
	    | _ -> failwith "gen_expr"
	end

(* |gen_call| -- generate code to call a procedure *)
and gen_call x args =
  let d = x.x_def in
  match d.d_kind with
      LibDef q ->
	gen_libcall q args d.d_type
    | _ ->
	let p = get_proc d.d_type in
	<CALL (p.p_pcount + 1, count_of p.p_result), @(gen_closure d @
	    List.concat (List.map gen_arg (List.combine p.p_fparams args)))>

(* |gen_arg| -- generate code for a procedure argument *)
and gen_arg (f, a) = 
  match f.d_kind with
      CParamDef ->
	if scalar f.d_type || is_pointer f.d_type then 
	  [gen_expr a]
	else 
	  [gen_addr a]
    | VParamDef ->
	[gen_addr a]
    | PParamDef ->
        begin
	  match a.e_guts with 
              Variable x -> 
		gen_closure x.x_def
            | _ -> 
		failwith "bad funarg"
	end
    | _ -> failwith "bad arg"

(* |gen_libcall| -- generate code to call a built-in procedure *)
and gen_libcall q args rtype =
  match (q.q_id, args) with
      ((ChrFun|OrdFun), [e]) ->
	gen_expr e
    | (PrintString, [e]) ->
        libcall "_print_string" 2 
	  [gen_addr e; <CONST (bound e.e_type)>] voidtype
    | (ReadChar, [e]) ->
        libcall "_read_char" 1 [gen_addr e] voidtype
    | (NewProc, [e]) ->
	let size = size_of (base_type e.e_type) in
	libcall "_new" 2 [gen_addr e; <CONST size>] voidtype
    | (ArgvProc, [e1; e2]) ->
	libcall "_argv" 2 [gen_expr e1; gen_addr e2] voidtype
    | (OpenIn, [e]) ->
	libcall "_open_in" 1 [gen_addr e] voidtype
    | (_, _) ->
	let proc = sprintf "_$" [fLibId q.q_id] in
	libcall proc (List.length args)
	  (List.map gen_expr args) rtype

(* |gen_cond| -- generate code to branch on a condition *)
let rec gen_cond sense lab test =
  match test.e_value with
      Some v ->
	if sense = (v <> 0) then <JUMP lab> else <NOP>
    | None ->
	begin
	  match test.e_guts with
	      Monop (Not, e) ->
		gen_cond (not sense) lab e
	    | Binop ((And | Or) as op, e1, e2) ->
		if op = (if sense then Or else And) then
		  <SEQ, gen_cond sense lab e1,
		    gen_cond sense lab e2>
		else
		  let l1 = label () in
		  <SEQ, gen_cond (not sense) l1 e1,
		    gen_cond sense lab e2,
		    <LABEL l1>>
	    | Binop ((Eq | Neq | Lt | Leq | Gt | Geq) as w, e1, e2) ->
		<JUMPC ((if sense then w else negate w), lab),
		  gen_expr e1, gen_expr e2>
	    | _ ->
		<JUMPB (sense, lab), gen_expr test>
	end

(* |gen_stmt| -- generate code for a statement *)
let rec gen_stmt s = 
  let body =
    match s.s_guts with
	Skip -> <NOP>
      | Seq ss -> <SEQ, @(List.map gen_stmt ss)>
      | Assign (v, e) ->
	  if scalar v.e_type || is_pointer v.e_type then
	    <STORE (size_of v.e_type), gen_expr e, gen_addr v>
	  else
	    <FIXCOPY, gen_addr v, gen_addr e, <CONST (size_of v.e_type)>>
      | ProcCall (p, args) ->
	  gen_call p args
      | Return res ->
	  begin
	    match res with
		Some e -> <SEQ, <RESULT 1, gen_expr e>, <JUMP !retlab>>
	      | None -> <JUMP !retlab>
	  end
      | IfStmt (test, thenpt, elsept) ->
	  let l1 = label () and l2 = label () in
	  <SEQ, gen_cond false l1 test;
	    gen_stmt thenpt;
	    <JUMP l2>,
	    <LABEL l1>,
	    gen_stmt elsept,
	    <LABEL l2>>
      | WhileStmt (test, body) ->
	  let l1 = label () and l2 = label () in
	  <SEQ, <JUMP l2>, 
	    <LABEL l1>,
	    gen_stmt body;
	    <LABEL l2>,
	    gen_cond true l1 test> in
   <SEQ, <LINE s.s_line>, body>

(* unnest -- move procedure calls to top level *)
let unnest code =
  let rec do_tree root =
    function
	<CALL (n, r), @args> ->
	  let the_call = <CALL (n, r), @(List.map (do_tree false) args)> in
	  if root then
	    the_call
	  else begin
	    let n = Regs.new_temp 2 in
	    <AFTER, <STORE Mach.int_rep.r_size, the_call, <TEMP n>>,
	      <LOAD Mach.int_rep.r_size, <TEMP n>>>
          end
      | <w, @args> ->
	  <w, @(List.map (do_tree false) args)> in
  Keiko.canon <SEQ, @(List.map (do_tree true) code)>

(* |do_proc| -- generate code for a procedure *)
let do_proc lab lev fsize body =
  level := lev+1;
  retlab := label ();
  let code = Keiko.canon <SEQ, gen_stmt body, <LABEL !retlab>> in
  Regs.init ();
  let code' =
    if !optlevel >= 2 then
      Share.traverse (Jumpopt.optimize (Simp.optimize code))
    else if !optlevel >= 1 then
      unnest (Jumpopt.optimize (Simp.optimize code))
    else
      unnest code in
  if !debug > 0 then
    List.iter Keiko.print_optree code';
  Tran.translate lab fsize code'

(* |gen_proc| -- translate a procedure, ignore other declarations *)
let rec gen_proc = 
  function
      ProcDecl (Heading (x, _, _), Block (locals, body, fsize)) ->
	let d = x.x_def in
	begin
	  match d.d_addr with 
	      Global lab ->
		do_proc lab d.d_level !fsize body;
		gen_procs locals
	    | _ -> failwith "gen_proc"
	end
    | _ -> ()

(* |gen_procs| -- generate code for the procedures in a block *)
and gen_procs ds = List.iter gen_proc ds

(* |gen_global| -- generate declaration for global variable *)
let gen_global d =
  match d.d_kind with
      VarDef ->
	(match d.d_addr with
	    Global lab -> 
	      Risc86.emit_global lab (size_of d.d_type)
	  | _ -> failwith "gen_global")
    | _ -> ()

(* |translate| -- generate code for the whole program *)
let translate (Prog (Block (globals, main, _), glodefs)) =
  Risc86.preamble ();
  gen_procs globals;
  do_proc "_pmain" 0 0 main;
  List.iter gen_global !glodefs;
  List.iter (fun (lab, s) -> Risc86.emit_string lab s) (string_table ());
  Risc86.postamble ()

